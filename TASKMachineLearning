import librosa
import numpy as np
import os
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv1D, MaxPooling1D, Flatten, Dropout, LSTM
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelEncoder

# Load and preprocess data
def load_data(data_path):
    X, y = [], []
    for file in os.listdir(data_path):
        if file.endswith(".wav"):
            file_path = os.path.join(data_path, file)
            emotion = file.split("_")[2]  # Example to extract emotion from filename
            
            # Load audio file and extract features
            signal, sr = librosa.load(file_path, sr=None)
            mfccs = librosa.feature.mfcc(y=signal, sr=sr, n_mfcc=13)
            mfccs = np.mean(mfccs.T, axis=0)  # Taking mean across time dimension
            
            X.append(mfccs)
            y.append(emotion)
    
    return np.array(X), np.array(y)

data_path = "path_to_audio_files"  # Replace with your directory of .wav files
X, y = load_data(data_path)

# Encode labels
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)
y = to_categorical(y)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the model
model = Sequential([
    Dense(256, activation='relu', input_shape=(X_train.shape[1],)),
    Dropout(0.3),
    Dense(128, activation='relu'),
    Dropout(0.3),
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(y.shape[1], activation='softmax')
])

# Compile model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train model
history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))

# Evaluate model
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {test_accuracy}")

# Save the model
model.save("emotion_recognition_model.h5")

